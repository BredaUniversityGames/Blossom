#version 460 core
#extension GL_GOOGLE_include_directive : require

#include "grass_locations.glsl"

#define PATCH_COUNT 16

layout(local_size_x = PATCH_COUNT, local_size_y = PATCH_COUNT) in;

#include "grass_structures.glsl"

layout(binding=NOISE_TEXTURE_UNIT, rgba8) uniform image2D noise_image;

void main() 
{
	uint rowSize = gl_NumWorkGroups.x * gl_WorkGroupSize.x;

	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;

	uint index = (x) + (y) * rowSize;

    vec3 uv = vec3(gl_GlobalInvocationID) / vec3(gl_WorkGroupSize * gl_NumWorkGroups);

    vec4 noise = imageLoad(noise_image, ivec2(uv.xy * 256));
    noise.x = noise.x * 2 - 1;

	vec2 modifier = 1.0 / (gl_NumWorkGroups.xy / 16.0);

	vec3 patchSize = vec3(vec2(1.0 / PATCH_COUNT), 0.0);
	instanceData[index].position = vec4(index / float(rowSize) * patchSize.x, mod(index, rowSize) * patchSize.y, 0.0, 0.0);
	instanceData[index].position.xy -= gl_NumWorkGroups.xy / 2.0; // Center positions.
	instanceData[index].position.xy *= modifier;
	instanceData[index].position.xy += noise.xy * (1.0 / PATCH_COUNT * 2.0); // Random offset.

	instanceData[index].chunkUv = uv.xy;
}

