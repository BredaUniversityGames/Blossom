#version 460 core

#define PROP_GROUP_SIZE 128

struct prop_struct
{
	vec3 position;
	float scale;
	vec3 surface_normal;
	float percent_discard;
};

#define PI 3.1415926535897932384626433832795

layout (local_size_x = PROP_GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout (std430, binding = 0) buffer a_propData
{
	prop_struct props[];
};

uniform mat4 u_terrainMatrix;
uniform float u_heightMod;

uniform sampler2D u_heightMap;
uniform sampler2D u_densityMap;

vec3 computeNormal(vec3 pos, mat4 uvTransform)
{
	float thirdTau = (2.0 * PI) / 3.0; 

    vec3 pointA = pos + vec3(cos(thirdTau * 1), sin(thirdTau * 1), 0.0f);
    vec3 pointB = pos + vec3(cos(thirdTau * 2), sin(thirdTau * 2), 0.0f);
    vec3 pointC = pos + vec3(cos(thirdTau * 3), sin(thirdTau * 3), 0.0f);

	pointA.z = texture2D(u_heightMap, vec2(u_terrainMatrix * vec4(pointA, 1.0f))).x * u_heightMod;
	pointB.z = texture2D(u_heightMap, vec2(u_terrainMatrix * vec4(pointB, 1.0f))).x * u_heightMod;
	pointC.z = texture2D(u_heightMap, vec2(u_terrainMatrix * vec4(pointC, 1.0f))).x * u_heightMod;

	vec3 vecAB = pointB - pointA;
	vec3 vecAC = pointC - pointA;

	vec3 normal = normalize(cross(vecAB, vecAC));

	return normal;
}

void main()
{
	uint index = gl_GlobalInvocationID.x;

	props[index].position.z = 0.0f;
	vec4 v_position = u_terrainMatrix * vec4(props[index].position, 1.0f);

	vec2 terrainUV = (v_position).xy;

	float propHeight = texture2D(u_heightMap, terrainUV).x * u_heightMod;

	props[index].position.z = propHeight + v_position.z;
	props[index].percent_discard = texture2D(u_densityMap, terrainUV).x;

    props[index].surface_normal = computeNormal(props[index].position, u_terrainMatrix);
}